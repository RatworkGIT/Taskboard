@using System.ComponentModel.DataAnnotations
@using Microsoft.Extensions.Localization
@using Taskboard.Entities.Task
@using Taskboard.Services.Task
@using Taskboard.Services.Update
@using Taskboard.Models.DTO
@using TaskStatus = Taskboard.Entities.Task.TaskStatus
@inject TaskService taskservice
@inject UpdateService updateservice
@inject ISnackbar Snackbar
@inject ILogger<CreateDialog> logger
@inject IStringLocalizer<SharedResource> localizer

<MudDialog Class="dialog-background orange-text">
    <TitleContent >
        <MudText Typo="Typo.h6">
            @MudDialog.Title
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @bind-IsValid="@successTitle">
            <MudStack Class="orange-text">
                <MudTextField Validation="@(() => CheckForInput(successTitle, titleField))" AutoFocus="true" DebounceInterval="400" Required="true" RequiredError="@localizer["NoTitleInputError"]" InputType="InputType.Text" MaxLength="50" ShrinkLabel @bind-Value="task.Title" Label="@localizer["Title"]" Variant="Variant.Outlined" Style="@($"color:{Theme.PaletteLight.Warning};")"/>
                <MudSpacer/>
                <MudTextField ShrinkLabel @bind-Value="task.Description" Label="@localizer["Description"]" Variant="Variant.Outlined"></MudTextField>
            </MudStack>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">@localizer["Cancel"]</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">@localizer["Save"]</MudButton>
    </DialogActions>
</MudDialog>

<style>
    
    
    .dialog-background {
        width: 100%;
        height: 100%;
        background: #191a1c;
    }
</style>

@code {
    [CascadingParameter] 
    private IMudDialogInstance MudDialog { get; set; }

    private MudTheme Theme = new();
    
    private bool successTitle;

    private MudTextField<string> titleField;

    private TaskStatus _taskStatus = TaskStatus.ToDo;
    
    public CreateTaskDTO task = new();
    
    public Snackbar? snackbar;
    
    private bool CheckForInput(bool success, MudTextField<string> field)
    {
        if (field.HasErrors || field.Value is null)
        {
            success = false;
            return success;
        }

        success = true;
        return success;
    }
    
    private void ShowError(string msg)
    {
        snackbar = Snackbar.Add(msg, Severity.Error, config =>
        {
            config.SnackbarVariant = Variant.Filled;
            config.VisibleStateDuration = int.MaxValue;
        });
    }

    private async Task Submit()
    {
        try
        {
            if (successTitle)
            {
                task.TaskStatus = _taskStatus;
                await taskservice.CreateTaskAsync(task);
                MudDialog.Close(DialogResult.Ok(true));
                updateservice.CallRequestUpdate();
            }
            else
            {
                var msg = @localizer["NoTitleInputError"];
                ShowError(msg);

                throw new ValidationException("Title missing on creation");
            }
        }
        catch (ValidationException ex)
        {
            logger.LogWarning("Validation failed: {ValidationException}", ex);
        }
        
    }

    private void Cancel() => MudDialog.Cancel();
}
@using Microsoft.Extensions.Localization
@using Taskboard.Components.Buttons
@using Taskboard.Models.DTO
@using Taskboard.Services.Task
@using Taskboard.Services.Update
@inject TaskService taskservice
@inject UpdateService updateservice
@inject ISnackbar Snackbar
@inject IStringLocalizer<SharedResource> localizer

<MudDialog Class="dialog-background">
    <TitleContent>
        <MudStack Row Justify="Justify.SpaceBetween">
            <MudText Typo="Typo.h5">@MudDialog.Title</MudText>
            <MudStack Row>
                <DeleteTaskButton SelectedTask="@CurrentTask" CurrentDialog="@MudDialog" />
            </MudStack>
        </MudStack>
    </TitleContent>

    <DialogContent>
        <MudForm @bind-IsValid="successTitle">
            <MudTextField @ref="titleField"
                          AutoFocus="true"
                          Required="true"
                          RequiredError="@localizer["NoTitleInputError"]"
                          MaxLength="50"
                          ShrinkLabel
                          @bind-Value="DialogTask.Title"
                          Label="@localizer["Title"]"
                          Variant="Variant.Outlined" />
        </MudForm>

        <MudTextField MaxLength="200"
                      AutoGrow Lines="5"
                      ShrinkLabel
                      @bind-Value="DialogTask.Description"
                      Label="@localizer["Description"]"
                      Variant="Variant.Outlined" />
    </DialogContent>

    <DialogActions>
        <MudButton OnClick="Cancel">@localizer["Cancel"]</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">@localizer["Save"]</MudButton>
    </DialogActions>
</MudDialog>

<style>
    .dialog-background {
        width: 100%;
        height: 100%;
        background: #191a1c;
        color: #d3d3d3;
    }
</style>

@code {
    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public UpdateTaskDTO CurrentTask { get; set; } = default!;

    private UpdateTaskDTO DialogTask = new();

    private bool successTitle;
    private MudTextField<string> titleField = default!;
    private Snackbar? snackbar;

    protected override void OnParametersSet()
    {
        DialogTask = new UpdateTaskDTO()
        {
            Id = CurrentTask.Id,
            Title = CurrentTask.Title,
            Description = CurrentTask.Description,
            TaskStatus = CurrentTask.TaskStatus,
        };
    }

    private void ShowError(string msg)
    {
        snackbar = Snackbar.Add(msg, Severity.Error, config =>
        {
            config.SnackbarVariant = Variant.Filled;
            config.VisibleStateDuration = int.MaxValue;
        });
    }

    private async Task Submit()
    {
        if (!successTitle || string.IsNullOrWhiteSpace(DialogTask.Title))
        {
            ShowError(localizer["NoTitleInputError"]);
            return;
        }

        await taskservice.UpdateTaskAsync(DialogTask);

        CurrentTask.Title = DialogTask.Title;
        CurrentTask.Description = DialogTask.Description;
        CurrentTask.TaskStatus = DialogTask.TaskStatus;

        MudDialog.Close(DialogResult.Ok(true));
        updateservice.CallRequestUpdate();
    }

    private void Cancel() => MudDialog.Cancel();
}

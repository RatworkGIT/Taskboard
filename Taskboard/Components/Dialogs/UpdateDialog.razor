@using Taskboard.Entities.Task
@using Taskboard.Models.DTO
@using Taskboard.Services.Task
@using Taskboard.Services.Update
@using TaskStatus = Taskboard.Entities.Task.TaskStatus
@inject TaskService taskservice
@inject UpdateService updateservice

<MudDialog>
    <TitleContent>
        @MudDialog.Title
    </TitleContent>
    <DialogContent>
        <MudTextField ShrinkLabel @bind-Value="CurrentTask.Title" Label="Titel" Variant="Variant.Text"></MudTextField>
        <MudTextField ShrinkLabel @bind-Value="CurrentTask.Description" Label="Description" Variant="Variant.Text"></MudTextField>
        <MudSelect @bind-Value="CurrentTask.TaskStatus" Label="TaskStatus">
            @foreach (TaskStatus item in Enum.GetValues(typeof(TaskStatus)))
            {
                <MudSelectItem Value="@item">@item</MudSelectItem>
            }
        </MudSelect>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Abbrechen</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Speichern</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] 
    private IMudDialogInstance MudDialog { get; set; }
    
    [Parameter]
    public TaskItemEntity CurrentTask { get; set; }
    
    private TaskStatus _taskStatus;
       

    private async Task Submit()
    {
        UpdateTaskDTO updatedTask = new UpdateTaskDTO
        {
            Id = CurrentTask.Id,
            Title = CurrentTask.Title,
            Description = CurrentTask.Description,
            TaskStatus = CurrentTask.TaskStatus
        };
            
        await taskservice.UpdateTaskAsync(updatedTask);
        StateHasChanged();
        MudDialog.Close(DialogResult.Ok(true));
        updateservice.CallRequestUpdate();
    }

    private void Cancel() => MudDialog.Cancel();
}
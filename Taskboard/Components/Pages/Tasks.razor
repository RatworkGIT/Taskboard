@page "/"
@using Taskboard.Entities.Task
@using Taskboard.Models.DTO
@using Taskboard.Services.Task
@using Taskboard.Services.Update
@using TaskStatus = Taskboard.Entities.Task.TaskStatus
@inject TaskService taskservice
@inject UpdateService updateservice




<MudDropContainer T="TaskItemEntity" Items="allTasks" ItemsSelector="@((TaskItemEntity task, string dropzone) => task.TaskStatus.ToString() == dropzone)" ItemDropped="TaskMoved" Style="display:flex; flex-direction: row; width: 100%; height: 100%">
    <ChildContent>
        <MudDropZone T="TaskItemEntity" Identifier="ToDo" Style="display: flex; flex-direction: column; width: 30%; text-align: center; height: 100vh; border: 2px solid #f6f5f3; border-radius: 5px;">
            <MudText Typo="Typo.h6">ToDo</MudText>
        </MudDropZone>

        <MudDropZone T="TaskItemEntity" Identifier="InProgress" Style="display: flex; flex-direction: column; width: 30%; text-align: center; height: 100vh; border: 2px solid #f6f5f3; border-radius: 5px;">
            <MudText Typo="Typo.h6">In Progress</MudText>
        </MudDropZone>

        <MudDropZone T="TaskItemEntity" Identifier="Done" Style="display: flex; flex-direction: column; width: 30%; text-align: center; height: 100vh; border: 2px solid #f6f5f3; border-radius: 5px;">
            <MudText Typo="Typo.h6">Done</MudText>
        </MudDropZone>

    </ChildContent>
    <ItemRenderer>
        <TaskCard CardTaskItem="@context" />
    </ItemRenderer>
</MudDropContainer>
@code {

    private List<TaskItemEntity> allTasks = new();

    private async Task TaskMoved(MudItemDropInfo<TaskItemEntity> task)
    {

        if (task.DropzoneIdentifier == nameof(TaskStatus.ToDo))
        {
            task.Item.TaskStatus = TaskStatus.ToDo;
        }else if (task.DropzoneIdentifier == nameof(TaskStatus.InProgress))
        {
            task.Item.TaskStatus = TaskStatus.InProgress;
        }else if (task.DropzoneIdentifier == nameof(TaskStatus.Done))
        {
            task.Item.TaskStatus = TaskStatus.Done;
        }

        UpdateTaskDTO dto = new UpdateTaskDTO
        {
            Id = task.Item.Id,
            Title = task.Item.Title,
            Description = task.Item.Description,
            TaskStatus = task.Item.TaskStatus
        };
        
        await taskservice.UpdateTaskAsync(dto);
        

    }

    private async void UpdateTasks()
    {
        await LoadTasks();
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadTasks();
        updateservice.UpdateRequested += UpdateTasks;
    }

    private async Task<List<TaskItemEntity>> LoadTasks()
    {
        allTasks = await taskservice.GetAllTasksAsync();
        return allTasks;
    }
    
}
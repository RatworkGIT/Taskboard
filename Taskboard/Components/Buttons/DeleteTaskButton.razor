@using Microsoft.Extensions.Localization
@using Taskboard.Components.Dialogs
@using Taskboard.Entities.Task
@using Taskboard.Models
@using Taskboard.Models.DTO
@using Taskboard.Services
@using Taskboard.Services.Task
@using Taskboard.Services.Update
@inject TaskService taskservice
@inject UpdateService updateservice
@inject IDialogService dialogservice
@inject IStringLocalizer<SharedResource> localizer

<MudButton OnClick="@(() => DeleteTaskAsync(SelectedTask))" Variant="Variant.Filled" Color="Color.Error" ><MudIcon Icon="@Icons.Material.Filled.Delete" Title="@localizer["Delete"]" /></MudButton>
<MudMessageBox @ref="_deleteMsgBox" Title="@localizer["DeleteWarningTitle"]" >
    <MessageContent>
        @localizer["DeleteWarningText"]
    </MessageContent>
    <YesButton>
        <MudButton Variant="Variant.Filled" Color="Color.Error" >@localizer["Delete"]</MudButton>
    </YesButton>
    <NoButton>
        <MudButton Variant="Variant.Filled" Color="Color.Error" >@localizer["Cancel"]</MudButton>
    </NoButton>
</MudMessageBox>
@code {
    [Parameter]
    public TaskItemDTO SelectedTask { get; set; }
    [Parameter]
    public IMudDialogInstance CurrentDialog { get; set; }
    
    private readonly DialogOptions _backdropClick = new() { BackdropClick = false };

    private MudMessageBox _deleteMsgBox;

    private async Task DeleteTaskAsync(TaskItemDTO task)
    {
        bool? result = await _deleteMsgBox.ShowAsync(_backdropClick);
        if (result == false)
        {
            //Cancelled
            
        }
        else
        {
            CurrentDialog.Close(DialogResult.Ok((true)));
            await taskservice.DeleteTaskAsync(task);
            updateservice.CallRequestUpdate();
        }

    }
}